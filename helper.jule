// Random values generation functions
// RLAPI void SetRandomSeed(unsigned int seed)                      // Set the seed for the random number generator
cpp unsafe fn SetRandomSeed(seed: u32)
fn SetRandomSeed(seed: u32) {
	unsafe { cpp.SetRandomSeed(seed) }
}

// RLAPI int GetRandomValue(int min, int max)                       // Get a random value between min and max (both included)
cpp unsafe fn GetRandomValue(min: i32, max: i32)
fn GetRandomValue(min: i32, max: i32) {
	unsafe { cpp.GetRandomValue(min, max) }
}

// RLAPI int *LoadRandomSequence(unsigned int count, int min, int max) // Load random values sequence, no values repeated
cpp unsafe fn LoadRandomSequence(count: u32, min: i32, max: i32): *i32
fn LoadRandomSequence(count: u32, min: i32, max: i32): *i32 {
	let arr = unsafe { cpp.LoadRandomSequence(count, min, max) }
	ret unsafe { &arr[0] }
}

// RLAPI void UnloadRandomSequence(int *sequence)                   // Unload random values sequence
cpp unsafe fn UnloadRandomSequence(sequence: *i32)
fn UnloadRandomSequence(sequence: []i32) {
	unsafe { cpp.UnloadRandomSequence(&sequence[0]) }
}

// Misc. functions
// RLAPI void TakeScreenshot(const char *fileName)                  // Takes a screenshot of current screen (filename extension defines format)
cpp unsafe fn TakeScreenshot(fileName: *cpp.char)
fn TakeScreenshot(fileName: str) {
	unsafe { cpp.TakeScreenshot(strToCharPtr(fileName)) }
}

// RLAPI void SetConfigFlags(unsigned int flags)                    // Setup init configuration flags (view FLAGS)
cpp unsafe fn SetConfigFlags(flags: u32)
fn SetConfigFlags(flags: u32) {
	unsafe { cpp.SetConfigFlags(flags) }
}

// RLAPI void OpenURL(const char *url)                              // Open URL with default system browser (if available)
cpp unsafe fn OpenURL(url: *cpp.char)
fn OpenURL(url: str) {
	unsafe { cpp.OpenURL(strToCharPtr(url)) }
}

// NOTE: Following functions implemented in module [utils]
//------------------------------------------------------------------
// RLAPI void TraceLog(int logLevel, const char *text, ...)         // Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
cpp unsafe fn TraceLog(logLevel: i32, text: *cpp.char,info: ...*cpp.char)
fn TraceLog(logLevel: i32, text: str, info: ...str) {
	unsafe {
		let mut arr = make([]*cpp.char, 0, len(info))
		for i in info {
			arr = append(arr, strToCharPtr(info[i]))
		}
		cpp.TraceLog(logLevel,strToCharPtr(text), arr...)
	}
}

// RLAPI void SetTraceLogLevel(int logLevel)                        // Set the current threshold (minimum) log level
cpp unsafe fn SetTraceLogLevel(logLevel: i32)
fn SetTraceLogLevel(logLevel: i32) {
	unsafe { cpp.SetTraceLogLevel(logLevel) }
}

// RLAPI void *MemAlloc(unsigned int size)                          // Internal memory allocator
cpp unsafe fn MemAlloc(size: u32)
fn MemAlloc(size: u32) {
	unsafe { cpp.MemAlloc(size) }
}

// RLAPI void *MemRealloc(void *ptr, unsigned int size)             // Internal memory reallocator
cpp unsafe fn MemRealloc(ptr: *any, size: u32)
fn MemRealloc(ptr: *any, size: u32) {
	unsafe { cpp.MemRealloc(ptr, size) }
}

// RLAPI void MemFree(void *ptr)                                    // Internal memory free
cpp unsafe fn MemFree(ptr: *any)
fn MemFree(ptr: *any) {
	unsafe { cpp.MemFree(ptr) }
}


// Set custom callbacks
// WARNING: Callbacks setup is intended for advanced users
// RLAPI void SetTraceLogCallback(TraceLogCallback callback)         // Set custom trace log
cpp unsafe fn SetTraceLogCallback(callback: any)
fn SetTraceLogCallback(callback: any) {
   //todo
}

// RLAPI void SetLoadFileDataCallback(LoadFileDataCallback callback) // Set custom file binary data loader
cpp unsafe fn SetLoadFileDataCallback(callback: any)
fn SetLoadFileDataCallback(callback: any) {
	//todo
}

// RLAPI void SetSaveFileDataCallback(SaveFileDataCallback callback) // Set custom file binary data saver
cpp unsafe fn SetSaveFileDataCallback(callback: any)
fn SetSaveFileDataCallback(callback: any) {
	//todo
}

// RLAPI void SetLoadFileTextCallback(LoadFileTextCallback callback) // Set custom file text data loader
cpp unsafe fn SetLoadFileTextCallback(callback: any)
fn SetLoadFileTextCallback(callback: any) {
	//todo
}

// RLAPI void SetSaveFileTextCallback(SaveFileTextCallback callback) // Set custom file text data saver
cpp unsafe fn SetSaveFileTextCallback(callback: any)
fn SetSaveFileTextCallback(callback: any) {
	//todo
}

// Files management functions
// RLAPI unsigned char *LoadFileData(const char *fileName, int *dataSize) // Load file data as byte array (read)
cpp unsafe fn LoadFileData(fileName: *cpp.char, dataSize: *i32): *u8
fn LoadFileData(fileName: *cpp.char, dataSize: []i32): *u8{
	ret unsafe { cpp.LoadFileData(fileName, &dataSize[0]) }
}

// RLAPI void UnloadFileData(unsigned char *data)                   // Unload file data allocated by LoadFileData()
cpp unsafe fn UnloadFileData(data: *u8)
fn UnloadFileData(data: []u8) {
	unsafe { cpp.UnloadFileData(&data[0]) }
}

// RLAPI bool SaveFileData(const char *fileName, void *data, int dataSize) // Save data to file from byte array (write), returns true on success
cpp unsafe fn SaveFileData(fileName: *cpp.char, data: *any, dataSize: i32): bool
fn SaveFileData(fileName: str, data: *any, dataSize: i32): bool {
	ret unsafe { cpp.SaveFileData(strToCharPtr(fileName), &data[0], dataSize) }
}

// RLAPI bool ExportDataAsCode(const unsigned char *data, int dataSize, const char *fileName) // Export data to code (.h), returns true on success
cpp unsafe fn ExportDataAsCode(data: *u8, dataSize: i32, fileName: *cpp.char): bool
fn ExportDataAsCode(data: []u8, dataSize: i32, fileName: str): bool {
	ret unsafe { cpp.ExportDataAsCode(&data[0], dataSize, strToCharPtr(fileName)) }
}

// RLAPI char *LoadFileText(const char *fileName)                   // Load text data from file (read), returns a '\0' terminated string
cpp unsafe fn LoadFileText(fileName: *cpp.char): *cpp.char
fn LoadFileText(fileName: *cpp.char): str {
	let s = unsafe { cpp.LoadFileText(fileName) }
	ret unsafe { ptrCharToStr(s) }
}

// RLAPI void UnloadFileText(char *text)                            // Unload file text data allocated by LoadFileText()
cpp unsafe fn UnloadFileText(text: *cpp.char)
fn UnloadFileText(text: str) {
	unsafe { cpp.UnloadFileText(strToCharPtr(text)) }
}

// RLAPI bool SaveFileText(const char *fileName, char *text)        // Save text data to file (write), string must be '\0' terminated, returns true on success
cpp unsafe fn SaveFileText(fileName: *cpp.char, text: *cpp.char): bool
fn SaveFileText(fileName: str, text: str): bool {
	ret unsafe { cpp.SaveFileText(strToCharPtr(fileName), strToCharPtr(text)) }
}