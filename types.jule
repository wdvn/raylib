
cpp type char: byte

#typedef
cpp struct Vector2{
    x: f64
    y: f64
}

// struct Vector2{
//    v: cpp.Vector2
// }
// 
// impl Vector2{
// static fn new(x:f64,y:f64):Vector2{
//     ret Vector2{v: cpp.Vector2{x:x,y:y}}}
// }

type Vector2 = cpp.Vector2

#typedef
cpp struct Vector3{
    x: f64
    y: f64
    z: f64
}

struct Vector3{
   v: cpp.Vector3
}

impl Vector3{
static fn new(x:f64,y:f64,z:f64):Vector3{
    ret Vector3{v: cpp.Vector3{x:x,y:y,z:z}}}
}


#typedef
cpp struct Vector4{
    x: f64
    y: f64
    z: f64
    w: f64
}

struct Vector4{
   v: cpp.Vector4
}

impl Vector4{
static fn new(x:f64,y:f64,z:f64,w:f64):Vector4{
    ret Vector4{v: cpp.Vector4{x:x,y:y,z:z,w:w}}}
}

#typedef
cpp struct Color {
    r: u8
    b: u8
    g: u8
    a: u8
}

struct Color {
   v: cpp.Color
}

impl Color{
    static fn new(r:u8,b:u8,g:u8,a:u8): Color{
        ret Color{v: cpp.Color{
            r: r,
            b:b,
            g:g,a:a
        }}
    }
    static fn Black(): Color{
        ret Color.new( 0, 0, 0, 255 ) 
    }
    static fn RayWhite(): Color{
        ret Color.new(245, 245, 245, 255 )
    }
}

#typedef
cpp struct Rectangle {
    x: u8
    y: u8
    width: u8
    height: u8
}

type Rectangle = cpp.Rectangle

#typedef
cpp struct Image {
    data: any
    width: int
    height: int
    mipmaps: int
    format: int
}

type Image = cpp.Image

#typedef
cpp struct Texture {
    id: uint
    width: int
    height: int
    mipmaps: int
    format: int
}

struct Texture {
   v: cpp.Texture
}

type Texture2D = Texture
type TextureCubemap = Texture

#typedef
cpp struct RenderTexture {
    id: uint                 // OpenGL framebuffer object id
    texture: Texture         // Color buffer attachment texture
    depth: Texture           // Depth buffer attachment texture
}

type RenderTexture = cpp.RenderTexture
type RenderTexture2D = cpp.RenderTexture

#typedef
cpp struct NPatchInfo{
    source: Rectangle
    left: int
    top: int
    right: int
    bottom: int
    layout: int
}

type NPatchInfo = cpp.NPatchInfo

#typedef
cpp struct GlyphInfo {
     value: int              // Character value (Unicode)
     offsetX: int            // Character offset X when drawing
     offsetY: int            // Character offset Y when drawing
     advanceX: int           // Character advance position X
     image: Image            // Character image data
}

type GlyphInfo = cpp.GlyphInfo 

#typedef
cpp struct Font {
     baseSize: int           // Base size (default chars height)
     glyphCount: int         // Number of glyph characters
     glyphPadding: int       // Padding around the glyph characters
     texture: Texture2D      // Texture atlas containing the glyphs
     recs: []Rectangle        // Rectangles in texture for the glyphs
     glyphs: []GlyphInfo      // Glyphs info data
} 

type Font = cpp.Font

#typedef
cpp struct Camera3D {
     position: Vector3       // Camera position
     target: Vector3         // Camera target it looks-at
     up: Vector3             // Camera up vector (rotation over its axis)
     fovy: f64             // Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
     projection: int         // Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
}

type Camera3D = cpp.Camera3D
type Camera = Camera3D

#typedef
cpp struct Camera2D {
     offset: Vector2         // Camera offset (displacement from target)
     target: Vector2         // Camera target (rotation and zoom origin)
     rotation: f64         // Camera rotation in degrees
     zoom: f64             // Camera zoom (scaling), should be 1.0f by default
}

type Camera2D = cpp.Camera2D

#typedef
cpp struct Mesh {
        vertexCount: int         // Number of vertices stored in arrays
        triangleCount: int       // Number of triangles stored (indexed or not)
    
        // Vertex attributes data
        vertices: []f64        // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
        texcoords: []f64       // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
        texcoords2: []f64      // Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
        normals: []f64         // Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
        tangents: []f64        // Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
        colors: []u8      // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
        indices: []u8    // Vertex indices (in case vertex data comes indexed)
    
        // Animation vertex data
        animVertices: []f64    // Animated vertex positions (after bones transformations)
        animNormals: []f64     // Animated normals (after bones transformations)
        boneIds: []u8 // Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning) (shader-location = 6)
        boneWeights: []float     // Vertex bone weight, up to 4 bones influence by vertex (skinning) (shader-location = 7)
        boneMatrices: []Matrix   // Bones animated transformation matrices
        boneCount: int         // Number of bones
    
        // OpenGL identifiers
        vaoId: u32     // OpenGL Vertex Array Object id
        vboId: []u32   // OpenGL Vertex Buffer Objects id (default vertex data)
}

#typedef 
cpp struct Shader {
    id: uint
    locs: []int
}

type Shader = cpp.Shader

#typedef
cpp struct Matrix {
        m0: f32
        m4: f32
        m8: f32
        m12: f32
        
        //
        m1: f32
        m5: f32
        m9: f32
        m13: f32
        
        m2: f32
        m6: f32
        m10: f32
        m14: f32
        
        m3: f32
        m7: f32
        m11: f32
        m15: f32
}
type Matrix = cpp.Matrix

#typedef
cpp struct VrStereoConfig {
    projection: [2]Matrix           // VR projection matrices (per eye)
    viewOffset: [2]Matrix           // VR view offset matrices (per eye)
    leftLensCenter: [2]f64        // VR left lens center
    rightLensCenter: [2]f64       // VR right lens center
    leftScreenCenter: [2]f64      // VR left screen center
    rightScreenCenter: [2]f64     // VR right screen center
    scale: [2]f64                 // VR distortion scale
    scaleIn: [2]f64               // VR distortion scale in
} 
type VrStereoConfig = cpp.VrStereoConfig