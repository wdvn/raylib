cpp type char: byte

#typedef
cpp struct Vector2 {
	x: f64
	y: f64
}

type Vector2 = cpp.Vector2

#typedef
cpp struct Vector3 {
	x: f64
	y: f64
	z: f64
}

type Vector3 = cpp.Vector3


#typedef
cpp struct Vector4 {
	x: f64
	y: f64
	z: f64
	w: f64
}

type Vector4 = cpp.Vector4
type Quaternion = Vector4

#typedef
cpp struct Matrix {
	m0:  f32
	m4:  f32
	m8:  f32
	m12: f32

	//
	m1:  f32
	m5:  f32
	m9:  f32
	m13: f32

	m2:  f32
	m6:  f32
	m10: f32
	m14: f32

	m3:  f32
	m7:  f32
	m11: f32
	m15: f32
}

type Matrix = cpp.Matrix

#typedef
cpp struct Color {
	r: u8
	b: u8
	g: u8
	a: u8
}

type Color = cpp.Color

#typedef
cpp struct Rectangle {
	x:      u8
	y:      u8
	width:  u8
	height: u8
}

type Rectangle = cpp.Rectangle

#typedef
cpp struct Image {
	data:    any
	width:   i32
	height:  i32
	mipmaps: i32
	format:  i32
}

type Image = cpp.Image

#typedef
cpp struct Texture {
	id:      u32
	width:   i32
	height:  i32
	mipmaps: i32
	format:  i32
}
type Texture = cpp.Texture
type Texture2D = Texture
type TextureCubemap = Texture

#typedef
cpp struct RenderTexture {
	id:      u32     // OpenGL framebuffer object id
	texture: Texture // Color buffer attachment texture
	depth:   Texture // Depth buffer attachment texture
}

type RenderTexture = cpp.RenderTexture
type RenderTexture2D = RenderTexture

#typedef
cpp struct NPatchInfo {
	source: Rectangle
	left:   i32
	top:    i32
	right:  i32
	bottom: i32
	layout: i32
}

type NPatchInfo = cpp.NPatchInfo

#typedef
cpp struct GlyphInfo {
	value:    i32   // Character value (Unicode)
	offsetX:  i32   // Character offset X when drawing
	offsetY:  i32   // Character offset Y when drawing
	advanceX: i32   // Character advance position X
	image:    Image // Character image data
}

type GlyphInfo = cpp.GlyphInfo

#typedef
cpp struct Font {
	baseSize:     i32         // Base size (default chars height)
	glyphCount:   i32         // Number of glyph characters
	glyphPadding: i32         // Padding around the glyph characters
	texture:      Texture2D   // Texture atlas containing the glyphs
	recs:         []Rectangle // Rectangles in texture for the glyphs
	glyphs:       []GlyphInfo // Glyphs info data
}

type Font = cpp.Font

#typedef
cpp struct Camera3D {
	position:   Vector3 // Camera position
	target:     Vector3 // Camera target it looks-at
	up:         Vector3 // Camera up vector (rotation over its axis)
	fovy:       f64     // Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
	projection: i32     // Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
}

type Camera3D = cpp.Camera3D
type Camera = Camera3D

#typedef
cpp struct Camera2D {
	offset:   Vector2 // Camera offset (displacement from target)
	target:   Vector2 // Camera target (rotation and zoom origin)
	rotation: f64     // Camera rotation in degrees
	zoom:     f64     // Camera zoom (scaling), should be 1.0f by default
}

type Camera2D = cpp.Camera2D

#typedef
cpp struct Mesh {
	vertexCount:   i32 // Number of vertices stored in arrays
	triangleCount: i32 // Number of triangles stored (indexed or not)

	// Vertex attributes data
	vertices:   []f64 // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
	texcoords:  []f64 // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
	texcoords2: []f64 // Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
	normals:    []f64 // Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
	tangents:   []f64 // Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
	colors:     []u8  // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
	indices:    []u8  // Vertex indices (in case vertex data comes indexed)

	// Animation vertex data
	animVertices: []f64    // Animated vertex positions (after bones transformations)
	animNormals:  []f64    // Animated normals (after bones transformations)
	boneIds:      []u8     // Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning) (shader-location = 6)
	boneWeights:  []f64  // Vertex bone weight, up to 4 bones influence by vertex (skinning) (shader-location = 7)
	boneMatrices: []Matrix // Bones animated transformation matrices
	boneCount:    i32      // Number of bones

	// OpenGL identifiers
	vaoId: u32   // OpenGL Vertex Array Object id
	vboId: []u32 // OpenGL Vertex Buffer Objects id (default vertex data)
}

type Mesh = cpp.Mesh

#typedef
cpp struct Shader {
	id:   u32
	locs: []i32
}

type Shader = cpp.Shader


#typedef
cpp struct VrStereoConfig {
	projection:        [2]Matrix // VR projection matrices (per eye)
	viewOffset:        [2]Matrix // VR view offset matrices (per eye)
	leftLensCenter:    [2]f64    // VR left lens center
	rightLensCenter:   [2]f64    // VR right lens center
	leftScreenCenter:  [2]f64    // VR left screen center
	rightScreenCenter: [2]f64    // VR right screen center
	scale:             [2]f64    // VR distortion scale
	scaleIn:           [2]f64    // VR distortion scale in
}

type VrStereoConfig = cpp.VrStereoConfig

// VrDeviceInfo, Head-Mounted-Display device parameters
#typedef
cpp struct VrDeviceInfo {
	hResolution:            i32    // Horizontal resolution in pixels
	vResolution:            i32    // Vertical resolution in pixels
	hScreenSize:            f64    // Horizontal size in meters
	vScreenSize:            f64    // Vertical size in meters
	eyeToScreenDistance:    f64    // Distance between eye and display in meters
	lensSeparationDistance: f64    // Lens separation distance in meters
	interpupillaryDistance: f64    // IPD (distance between pupils) in meters
	lensDistortionValues:   [4]f64 // Lens distortion constant parameters
	chromaAbCorrection:     [4]f64 // Chromatic aberration correction parameters
}

type VrDeviceInfo = cpp.VrDeviceInfo

