// Model management functions
// RLAPI Model LoadModel(const char *fileName);                                                // Load model from files (meshes and materials)
cpp unsafe fn LoadModel(fileName: *cpp.char): Model
fn LoadModel(fileName: str): Model {
	ret unsafe { cpp.LoadModel(strToCharPtr(fileName)) }
}

// RLAPI Model LoadModelFromMesh(Mesh mesh);                                                   // Load model from generated mesh (default material)
cpp unsafe fn LoadModelFromMesh(mesh: Mesh): Model
fn LoadModelFromMesh(mesh: Mesh): Model {
	ret unsafe { cpp.LoadModelFromMesh(mesh) }
}

// RLAPI bool IsModelValid(Model model);                                                       // Check if a model is valid (loaded in GPU, VAO/VBOs)
cpp unsafe fn IsModelValid(model: Model): bool
fn IsModelValid(model: Model): bool {
	ret unsafe { cpp.IsModelValid(model) }
}

// RLAPI void UnloadModel(Model model);                                                        // Unload model (including meshes) from memory (RAM and/or VRAM)
cpp unsafe fn UnloadModel(model: Model)
fn UnloadModel(model: Model) {
	unsafe { cpp.UnloadModel(model) }
}

// RLAPI BoundingBox GetModelBoundingBox(Model model);                                         // Compute model bounding box limits (considers all meshes)
cpp unsafe fn GetModelBoundingBox(model: Model): BoundingBox
fn GetModelBoundingBox(model: Model): BoundingBox {
	ret unsafe { cpp.GetModelBoundingBox(model) }
}

//**********************************************************

// Model drawing functions
// RLAPI void DrawModel(Model model, Vector3 position, float scale, Color tint);               // Draw a model (with texture if set)
cpp unsafe fn DrawModel(model: Model, position: Vector3, scale: f32, tint: Color)
fn DrawModel(model: Model, position: Vector3, scale: f32, tint: Color) {
	unsafe { cpp.DrawModel(model, position, scale, tint) }
}

// RLAPI void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); // Draw a model with extended parameters
cpp unsafe fn DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color)
fn DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color) {
	unsafe { cpp.DrawModelEx(model, position, rotationAxis, rotationAngle, scale, tint) }
}

// RLAPI void DrawModelWires(Model model, Vector3 position, float scale, Color tint);          // Draw a model wires (with texture if set)
cpp unsafe fn DrawModelWires(model: Model, position: Vector3, scale: f32, tint: Color)
fn DrawModelWires(model: Model, position: Vector3, scale: f32, tint: Color) {
	unsafe { cpp.DrawModelWires(model, position, scale, tint) }
}

// RLAPI void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); // Draw a model wires (with texture if set) with extended parameters
cpp unsafe fn DrawModelWiresEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color)
fn DrawModelWiresEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color) {
	unsafe { cpp.DrawModelWiresEx(model, position, rotationAxis, rotationAngle, scale, tint) }
}

// RLAPI void DrawModelPoints(Model model, Vector3 position, float scale, Color tint); // Draw a model as points
cpp unsafe fn DrawModelPoints(model: Model, position: Vector3, scale: f32, tint: Color)
fn DrawModelPoints(model: Model, position: Vector3, scale: f32, tint: Color) {
	unsafe { cpp.DrawModelPoints(model, position, scale, tint) }
}

// RLAPI void DrawModelPointsEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint); // Draw a model as points with extended parameters
cpp unsafe fn DrawModelPointsEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color)
fn DrawModelPointsEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color) {
	unsafe { cpp.DrawModelPointsEx(model, position, rotationAxis, rotationAngle, scale, tint) }
}

// RLAPI void DrawBoundingBox(BoundingBox box, Color color);                                   // Draw bounding box (wires)
cpp unsafe fn DrawBoundingBox(box: BoundingBox, color: Color)
fn DrawBoundingBox(box: BoundingBox, color: Color) {
	unsafe { cpp.DrawBoundingBox(box, color) }
}

// RLAPI void DrawBillboard(Camera camera, Texture2D texture, Vector3 position, float scale, Color tint);   // Draw a billboard texture
cpp unsafe fn DrawBillboard(camera: Camera, texture: Texture2D, position: Vector3, scale: f32, tint: Color)
fn DrawBillboard(camera: Camera, texture: Texture2D, position: Vector3, scale: f32, tint: Color) {
	unsafe { cpp.DrawBillboard(camera, texture, position, scale, tint) }
}

// RLAPI void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint); // Draw a billboard texture defined by source
cpp unsafe fn DrawBillboardRec(camera: Camera, texture: Texture2D, source: Rectangle, position: Vector3, size: Vector2, tint: Color)
fn DrawBillboardRec(camera: Camera, texture: Texture2D, source: Rectangle, position: Vector3, size: Vector2, tint: Color) {
	unsafe { cpp.DrawBillboardRec(camera, texture, source, position, size, tint) }
}

// RLAPI void DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint); // Draw a billboard texture defined by source and rotation
cpp unsafe fn DrawBillboardPro(camera: Camera, texture: Texture2D, source: Rectangle, position: Vector3, up: Vector3, size: Vector2, origin: Vector2, rotation: f32, tint: Color)
fn DrawBillboardPro(camera: Camera, texture: Texture2D, source: Rectangle, position: Vector3, up: Vector3, size: Vector2, origin: Vector2, rotation: f32, tint: Color) {
	unsafe { cpp.DrawBillboardPro(camera, texture, source, position, up, size, origin, rotation, tint) }
}