// Image loading functions
// NOTE: These functions do not require GPU access
//RLAPI Image LoadImage(const char *fileName);                                                             // Load image from file into CPU memory (RAM)
cpp unsafe fn LoadImage(path: *cpp.char): Image
fn LoadImage(path: str): Image {
	ret unsafe { cpp.LoadImage(strToCharPtr(path)) }
}

//RLAPI Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize);       // Load image from RAW file data
cpp unsafe fn LoadImageRaw(fileName: *cpp.char, width: i32, height: i32, format: i32, headerSize: i32): Image
fn LoadImageRaw(fileName: str, width: i32, height: i32, format: i32, headerSize: i32): Image {
	ret unsafe { cpp.LoadImageRaw(strToCharPtr(fileName), width, height, format, headerSize) }
}

//RLAPI Image LoadImageAnim(const char *fileName, int *frames);                                            // Load image sequence from file (frames appended to image.data)
cpp unsafe fn LoadImageAnim(fileName: *cpp.char, frames: *i32): Image
fn LoadImageAnim(fileName: str, frames: []i32): Image {
	ret unsafe { cpp.LoadImageAnim(strToCharPtr(fileName), &frames[0]) }
}

//RLAPI Image LoadImageAnimFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int *frames); // Load image sequence from memory buffer
cpp unsafe fn LoadImageAnimFromMemory(fileType: *cpp.char, fileData: *byte, dataSize: i32, frames: *i32): Image
fn LoadImageAnimFromMemory(fileType: str, fileData: []byte, dataSize: i32, frames: []i32): Image {
	ret unsafe { cpp.LoadImageAnimFromMemory(strToCharPtr(fileType), &fileData[0], dataSize, &frames[0]) }
}

//RLAPI Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);      // Load image from memory buffer, fileType refers to extension: i.e. '.png'
cpp unsafe fn LoadImageFromMemory(fileType: *cpp.char, fileData: *byte, dataSize: i32): Image
fn LoadImageFromMemory(fileType: str, fileData: []byte, dataSize: i32): Image {
	ret unsafe { cpp.LoadImageFromMemory(strToCharPtr(fileType), &fileData[0], dataSize) }
}

//RLAPI Image LoadImageFromTexture(Texture2D texture);                                                     // Load image from GPU texture data
cpp unsafe fn LoadImageFromTexture(texture: Texture2D): Image
fn LoadImageFromTexture(texture: Texture2D): Image {
	ret unsafe { cpp.LoadImageFromTexture(texture) }
}

//RLAPI Image LoadImageFromScreen(void);                                                                   // Load image from screen buffer and (screenshot)
cpp unsafe fn LoadImageFromScreen(): Image
fn LoadImageFromScreen(): Image {
	ret unsafe { cpp.LoadImageFromScreen() }
}

//RLAPI bool IsImageValid(Image image);                                                                    // Check if an image is valid (data and parameters)
cpp unsafe fn IsImageValid(image: Image): bool
fn IsImageValid(image: Image): bool {
	ret unsafe { cpp.IsImageValid(image) }
}

//RLAPI void UnloadImage(Image image);                                                                     // Unload image from CPU memory (RAM)
cpp unsafe fn UnloadImage(image: Image)
fn UnloadImage(image: Image) {
	unsafe { cpp.UnloadImage(image) }
}

//RLAPI bool ExportImage(Image image, const char *fileName);                                               // Export image data to file, returns true on success
cpp unsafe fn ExportImage(image: Image, fileName: *cpp.char): bool
fn ExportImage(image: Image, fileName: str): bool {
	ret unsafe { cpp.ExportImage(image, strToCharPtr(fileName)) }
}

//RLAPI unsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize);              // Export image to memory buffer
cpp unsafe fn ExportImageToMemory(image: Image, fileType: *cpp.char, fileSize: *i32): *u8
fn ExportImageToMemory(image: Image, fileType: *cpp.char, fileSize: []i32): []byte {
	let raw = unsafe { cpp.ExportImageToMemory(image, fileType, &fileSize[0]) }
	ret unsafe { ptrU8ToBytes(raw) }
}

//RLAPI bool ExportImageAsCode(Image image, const char *fileName);            // Export image as code file defining an array of bytes, returns true on success
cpp unsafe fn ExportImageAsCode(image: Image, fileName: *cpp.char): bool
fn ExportImageAsCode(image: Image, fileName: *cpp.char): bool {
	ret unsafe { cpp.ExportImageAsCode(image, fileName) }
}