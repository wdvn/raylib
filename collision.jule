// Basic shapes collision detection functions
// RLAPI bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);                                           // Check collision between two rectangles
cpp unsafe fn CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle): bool;
fn CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle): bool {
  ret  unsafe { cpp.CheckCollisionRecs(rec1, rec2) }
}

// RLAPI bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);        // Check collision between two circles
cpp unsafe fn CheckCollisionCircles(center1: Vector2, radius1: f32, center2: Vector2, radius2: f32): bool;
fn CheckCollisionCircles(center1: Vector2, radius1: f32, center2: Vector2, radius2: f32): bool {
  ret  unsafe { cpp.CheckCollisionCircles(center1, radius1, center2, radius2) }
}

// RLAPI bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);                         // Check collision between circle and rectangle
cpp unsafe fn CheckCollisionCircleRec(center: Vector2, radius: f32, rec: Rectangle): bool;
fn CheckCollisionCircleRec(center: Vector2, radius: f32, rec: Rectangle): bool {
  ret  unsafe { cpp.CheckCollisionCircleRec(center, radius, rec) }
}

// RLAPI bool CheckCollisionCircleLine(Vector2 center, float radius, Vector2 p1, Vector2 p2);               // Check if circle collides with a line created betweeen two points [p1] and [p2]
cpp unsafe fn CheckCollisionCircleLine(center: Vector2, radius: f32, p1: Vector2, p2: Vector2): bool;
fn CheckCollisionCircleLine(center: Vector2, radius: f32, p1: Vector2, p2: Vector2): bool {
  ret  unsafe { cpp.CheckCollisionCircleLine(center, radius, p1, p2) }
}

// RLAPI bool CheckCollisionPointRec(Vector2 point, Rectangle rec);                                         // Check if point is inside rectangle
cpp unsafe fn CheckCollisionPointRec(point: Vector2, rec: Rectangle): bool;
fn CheckCollisionPointRec(point: Vector2, rec: Rectangle): bool {
   ret unsafe { cpp.CheckCollisionPointRec(point, rec) }
}

// RLAPI bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);                       // Check if point is inside circle
cpp unsafe fn CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32): bool;
fn CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32): bool {
  ret  unsafe { cpp.CheckCollisionPointCircle(point, center, radius) }
}

// RLAPI bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);               // Check if point is inside a triangle
cpp unsafe fn CheckCollisionPointTriangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2): bool;
fn CheckCollisionPointTriangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2): bool {
 ret   unsafe { cpp.CheckCollisionPointTriangle(point, p1, p2, p3) }
}

// RLAPI bool CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold);                // Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
cpp unsafe fn CheckCollisionPointLine(point: Vector2, p1: Vector2, p2: Vector2, threshold: i32): bool;
fn CheckCollisionPointLine(point: Vector2, p1: Vector2, p2: Vector2, threshold: i32): bool {
  ret  unsafe { cpp.CheckCollisionPointLine(point, p1, p2, threshold) }
}

// RLAPI bool CheckCollisionPointPoly(Vector2 point, const Vector2 *points, int pointCount);                // Check if point is within a polygon described by array of vertices
cpp unsafe fn CheckCollisionPointPoly(point: Vector2, points: *Vector2, pointCount: i32): bool;
fn CheckCollisionPointPoly(point: Vector2, points: *Vector2, pointCount: i32): bool {
  ret  unsafe { cpp.CheckCollisionPointPoly(point, &points[0], pointCount) }
}

// RLAPI bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint); // Check the collision between two lines defined by two points each, returns collision point by reference
cpp unsafe fn CheckCollisionLines(startPos1: Vector2, endPos1: Vector2, startPos2: Vector2, endPos2: Vector2, collisionPoint: *Vector2): bool;
fn CheckCollisionLines(startPos1: Vector2, endPos1: Vector2, startPos2: Vector2, endPos2: Vector2, collisionPoint: *Vector2): bool {
  ret  unsafe { cpp.CheckCollisionLines(startPos1, endPos1, startPos2, endPos2, &collisionPoint[0]) }
}

// RLAPI Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);                                         // Get collision rectangle for two rectangles collision
cpp unsafe fn GetCollisionRec(rec1: Rectangle, rec2: Rectangle): Rectangle;
fn GetCollisionRec(rec1: Rectangle, rec2: Rectangle): Rectangle {
   ret unsafe { cpp.GetCollisionRec(rec1, rec2) }
}