// Input-related functions: keyboard
// RLAPI bool IsKeyPressed(int key);                             // Check if a key has been pressed once
cpp unsafe fn IsKeyPressed(key: int): bool
fn IsKeyPressed(key: int): bool {
	ret unsafe { cpp.IsKeyPressed(key) }
}

// RLAPI bool IsKeyPressedRepeat(int key);                       // Check if a key has been pressed again
cpp unsafe fn IsKeyPressedRepeat(key: int): bool
fn IsKeyPressedRepeat(key: int): bool {
	ret unsafe { cpp.IsKeyPressedRepeat(key) }
}

// RLAPI bool IsKeyDown(int key);                                // Check if a key is being pressed
cpp unsafe fn IsKeyDown(key: int): bool
fn IsKeyDown(key: int): bool {
	ret unsafe { cpp.IsKeyDown(key) }
}

// RLAPI bool IsKeyReleased(int key);                            // Check if a key has been released once
cpp unsafe fn IsKeyReleased(key: int): bool
fn IsKeyReleased(key: int): bool {
	ret unsafe { cpp.IsKeyReleased(key) }
}

// RLAPI bool IsKeyUp(int key);                                  // Check if a key is NOT being pressed
cpp unsafe fn IsKeyUp(key: int): bool
fn IsKeyUp(key: int): bool {
	ret unsafe { cpp.IsKeyUp(key) }
}

// RLAPI int GetKeyPressed(void);                                // Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
cpp unsafe fn GetKeyPressed(): int
fn GetKeyPressed(): int {
	ret unsafe { cpp.GetKeyPressed() }
}

// RLAPI int GetCharPressed(void);                               // Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
cpp unsafe fn GetCharPressed(): int
fn GetCharPressed(): int {
	ret unsafe { cpp.GetCharPressed() }
}

// RLAPI void SetExitKey(int key);                               // Set a custom key to exit program (default is ESC)
cpp unsafe fn SetExitKey(key: int)
fn SetExitKey(key: int) {
	unsafe { cpp.SetExitKey(key) }
}