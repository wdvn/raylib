// Texture loading functions
// NOTE: These functions require GPU access
//RLAPI Texture2D LoadTexture(const char *fileName);                                                       // Load texture from file into GPU memory (VRAM)
cpp unsafe fn LoadTexture(fileName: *cpp.char): Texture2D 
fn LoadTexture(fileName: str): Texture2D {
	ret unsafe { cpp.LoadTexture(strToCharPtr(fileName)) }
}

//RLAPI Texture2D LoadTextureFromImage(Image image);                                                       // Load texture from image data
cpp unsafe fn LoadTextureFromImage(image: Image): Texture2D
fn LoadTextureFromImage(image: Image): Texture2D{
    ret unsafe { cpp.LoadTextureFromImage(image)}
}

//RLAPI TextureCubemap LoadTextureCubemap(Image image, int layout);                                        // Load cubemap from image, multiple image cubemap layouts supported
cpp unsafe fn LoadTextureCubemap(image: Image, layout: int): TextureCubemap
fn LoadTextureCubemap(image: Image, layout: int): TextureCubemap{
    ret unsafe { cpp.LoadTextureCubemap(image, layout)}
}

//RLAPI RenderTexture2D LoadRenderTexture(int width, int height);                                          // Load texture for rendering (framebuffer)
cpp unsafe fn LoadRenderTexture(width: int,  height:int): RenderTexture2D
fn LoadRenderTexture( width:int, height:int ): RenderTexture2D{
    ret unsafe { cpp.LoadRenderTexture(width, height)}
}

//RLAPI bool IsTextureValid(Texture2D texture);                                                            // Check if a texture is valid (loaded in GPU)
cpp unsafe fn IsTextureValid(texture: Texture2D): bool
fn IsTextureValid(texture: Texture2D): bool{
    ret unsafe { cpp.IsTextureValid(texture)}
}

//RLAPI void UnloadTexture(Texture2D texture);                                                             // Unload texture from GPU memory (VRAM)
cpp unsafe fn UnloadTexture(texture: Texture2D)
fn UnloadTexture(texture: Texture2D){
    unsafe { cpp.UnloadTexture(texture)}
}

//RLAPI bool IsRenderTextureValid(RenderTexture2D target);                                                 // Check if a render texture is valid (loaded in GPU)
cpp unsafe fn IsRenderTextureValid(target: RenderTexture2D): bool
fn IsRenderTextureValid(target: RenderTexture2D): bool {
    ret unsafe { cpp.IsRenderTextureValid(target) }
}

//RLAPI void UnloadRenderTexture(RenderTexture2D target);                                                  // Unload render texture from GPU memory (VRAM)
cpp unsafe fn UnloadRenderTexture(target: RenderTexture2D)
fn UnloadRenderTexture(target: RenderTexture2D){
    unsafe { cpp.UnloadRenderTexture(target) }
}

//TODO: convert 'void *' to jule::Any
//RLAPI void UpdateTexture(Texture2D texture, const void *pixels);                                         // Update GPU texture with new data
//cpp unsafe fn UpdateTexture(texture: Texture2D, pixels: any)
//fn UpdateTexture(texture: Texture2D, pixels: any){
//    unsafe { cpp.UpdateTexture(texture, pixels)}
//}

//RLAPI void UpdateTextureRec(Texture2D texture, Rectangle rec, const void *pixels);                       // Update GPU texture rectangle with new data
//cpp unsafe fn UpdateTextureRec(texture: Texture2D, rec: Rectangle, pixels: jule::Void)
//fn UpdateTextureRec(texture: Texture2D, rec: Rectangle, pixels: any){
//    unsafe { cpp.UpdateTextureRec(texture, rec, pixels)}
//}