// Texture loading functions
// NOTE: These functions require GPU access
// RLAPI Texture2D LoadTexture(const char *fileName);                                                       // Load texture from file into GPU memory (VRAM)
cpp unsafe fn LoadTexture(fileName: *cpp.char): Texture2D
fn LoadTexture(fileName: str): Texture2D {
	ret unsafe { cpp.LoadTexture(strToCharPtr(fileName)) }
}

// RLAPI Texture2D LoadTextureFromImage(Image image);                                                       // Load texture from image data
cpp unsafe fn LoadTextureFromImage(image: Image): Texture2D
fn LoadTextureFromImage(image: Image): Texture2D {
	ret unsafe { cpp.LoadTextureFromImage(image) }
}

// RLAPI TextureCubemap LoadTextureCubemap(Image image, int layout);                                        // Load cubemap from image, multiple image cubemap layouts supported
cpp unsafe fn LoadTextureCubemap(image: Image, layout: i32): TextureCubemap
fn LoadTextureCubemap(image: Image, layout: i32): TextureCubemap {
	ret unsafe { cpp.LoadTextureCubemap(image, layout) }
}

// RLAPI RenderTexture2D LoadRenderTexture(int width, int height);                                          // Load texture for rendering (framebuffer)
cpp unsafe fn LoadRenderTexture(width: i32, height: i32): RenderTexture2D
fn LoadRenderTexture(width: i32, height: i32): RenderTexture2D {
	ret unsafe { cpp.LoadRenderTexture(width, height) }
}

// RLAPI bool IsTextureValid(Texture2D texture);                                                            // Check if a texture is valid (loaded in GPU)
cpp unsafe fn IsTextureValid(texture: Texture2D): bool
fn IsTextureValid(texture: Texture2D): bool {
	ret unsafe { cpp.IsTextureValid(texture) }
}

// RLAPI void UnloadTexture(Texture2D texture);                                                             // Unload texture from GPU memory (VRAM)
cpp unsafe fn UnloadTexture(texture: Texture2D)
fn UnloadTexture(texture: Texture2D) {
	unsafe { cpp.UnloadTexture(texture) }
}

// RLAPI bool IsRenderTextureValid(RenderTexture2D target);                                                 // Check if a render texture is valid (loaded in GPU)
cpp unsafe fn IsRenderTextureValid(target: RenderTexture2D): bool
fn IsRenderTextureValid(target: RenderTexture2D): bool {
	ret unsafe { cpp.IsRenderTextureValid(target) }
}

// RLAPI void UnloadRenderTexture(RenderTexture2D target);                                                  // Unload render texture from GPU memory (VRAM)
cpp unsafe fn UnloadRenderTexture(target: RenderTexture2D)
fn UnloadRenderTexture(target: RenderTexture2D) {
	unsafe { cpp.UnloadRenderTexture(target) }
}

// RLAPI void UpdateTexture(Texture2D texture, const void *pixels);                                         // Update GPU texture with new data
cpp unsafe fn UpdateTexture(texture: Texture2D, pixels: cpp.Void)
fn UpdateTexture(texture: Texture2D, pixels: cpp.Void) {
	unsafe { cpp.UpdateTexture(texture, pixels) }
}

// RLAPI void UpdateTextureRec(Texture2D texture, Rectangle rec, const void *pixels);                       // Update GPU texture rectangle with new data
cpp unsafe fn UpdateTextureRec(texture: Texture2D, rec: Rectangle, pixels: cpp.Void)
fn UpdateTextureRec(texture: Texture2D, rec: Rectangle, pixels: cpp.Void) {
	unsafe { cpp.UpdateTextureRec(texture, rec, pixels) }
}

//********************************************************
// Texture drawing functions
// RLAPI void DrawTexture(Texture2D texture, int posX, int posY, Color tint);                               // Draw a Texture2D
cpp unsafe fn DrawTexture(texture: Texture2D, posX: int, posY: int, tint: Color)
fn DrawTexture(texture: Texture2D, posX: int, posY: int, tint: Color) {
	unsafe { cpp.DrawTexture(texture, posX, posY, tint) }
}

// RLAPI void DrawTextureV(Texture2D texture, Vector2 position, Color tint);                                // Draw a Texture2D with position defined as Vector2
cpp unsafe fn DrawTextureV(texture: Texture2D, position: Vector2, tint: Color)
fn DrawTextureV(texture: Texture2D, position: Vector2, tint: Color) {
	unsafe { cpp.DrawTextureV(texture, position, tint) }
}

// RLAPI void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);  // Draw a Texture2D with extended parameters
cpp unsafe fn DrawTextureEx(texture: Texture2D, position: Vector2, rotation: f32, scale: f32, tint: Color)
fn DrawTextureEx(texture: Texture2D, position: Vector2, rotation: f32, scale: f32, tint: Color) {
	unsafe { cpp.DrawTextureEx(texture, position, rotation, scale, tint) }
}

// RLAPI void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);            // Draw a part of a texture defined by a rectangle
cpp unsafe fn DrawTextureRec(texture: Texture2D, source: Rectangle, position: Vector2, tint: Color)
fn DrawTextureRec(texture: Texture2D, source: Rectangle, position: Vector2, tint: Color) {
	unsafe { cpp.DrawTextureRec(texture, source, position, tint) }
}

// RLAPI void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint); // Draw a part of a texture defined by a rectangle with 'pro' parameters
cpp unsafe fn DrawTexturePro(texture: Texture2D, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color)
fn DrawTexturePro(texture: Texture2D, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color) {
	unsafe { cpp.DrawTexturePro(texture, source, dest, origin, rotation, tint) }
}

// RLAPI void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint); // Draws a texture (or part of it) that stretches or shrinks nicely
cpp unsafe fn DrawTextureNPatch(texture: Texture2D, nPatchInfo: NPatchInfo, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color)
fn DrawTextureNPatch(texture: Texture2D, nPatchInfo: NPatchInfo, dest: Rectangle, origin: Vector2, rotation: f32, tint: Color) {
	unsafe { cpp.DrawTextureNPatch(texture, nPatchInfo, dest, origin, rotation, tint) }
}