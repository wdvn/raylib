//***************************************************************************************
// Drawing-related functions

cpp unsafe fn ClearBackground(color: cpp.Color)
fn ClearBackground(color: Color) {
	unsafe { cpp.ClearBackground(color) }
}

cpp unsafe fn BeginDrawing()
fn BeginDrawing() {
	unsafe { cpp.BeginDrawing() }
}

cpp unsafe fn EndDrawing()
fn EndDrawing() {
	unsafe { cpp.EndDrawing() }
}

// RLAPI void BeginMode2D(Camera2D camera);                          // Begin 2D mode with custom camera (2D)
// RLAPI void EndMode2D(void);                                       // Ends 2D mode with custom camera
cpp unsafe fn EndMode2D()
fn EndMode2D() {
	unsafe { cpp.EndMode2D() }
}

// RLAPI void BeginMode3D(Camera3D camera);                          // Begin 3D mode with custom camera (3D)
// RLAPI void EndMode3D(void);                                       // Ends 3D mode and returns to default 2D orthographic mode
cpp unsafe fn EndMode3D()
fn EndMode3D() {
	unsafe { cpp.EndMode3D() }
}

// RLAPI void BeginTextureMode(RenderTexture2D target);              // Begin drawing to render texture
cpp unsafe fn BeginTextureMode(target: RenderTexture2D)
fn BeginTextureMode(target: RenderTexture2D) {
	unsafe {
		cpp.BeginTextureMode(target)
	}
}

// RLAPI void EndTextureMode(void);                                  // Ends drawing to render texture
cpp unsafe fn EndTextureMode()
fn EndTextureMode() {
	unsafe { cpp.EndTextureMode() }
}

// RLAPI void BeginShaderMode(Shader shader);                        // Begin custom shader drawing
cpp unsafe fn BeginShaderMode(shader: Shader)
fn BeginShaderMode(shader: Shader) {
	unsafe { cpp.BeginShaderMode(shader) }
}

// RLAPI void EndShaderMode(void);                                   // End custom shader drawing (use default shader)
cpp unsafe fn EndShaderMode()
fn EndShaderMode() {
	unsafe { cpp.EndShaderMode() }
}

// RLAPI void BeginBlendMode(int mode);                              // Begin blending mode (alpha, additive, multiplied, subtract, custom)
cpp unsafe fn BeginBlendMode(mode: i32)
fn BeginBlendMode(mode: i32) {
	unsafe { cpp.BeginBlendMode(mode) }
}

// RLAPI void EndBlendMode(void);                                    // End blending mode (reset to default: alpha blending)
cpp unsafe fn EndBlendMode()
fn EndBlendMode() {
	unsafe { cpp.EndBlendMode() }
}

// RLAPI void BeginScissorMode(int x, int y, int width, int height); // Begin scissor mode (define screen area for following drawing)
cpp unsafe fn BeginScissorMode(x: i32, y: i32, w: i32, h: i32)
fn BeginScissorMode(x: i32, y: i32, w: i32, h: i32) {
	unsafe { cpp.BeginScissorMode(x, y, w, h) }
}

// RLAPI void EndScissorMode(void);                                  // End scissor mode
cpp unsafe fn EndScissorMode()
fn EndScissorMode() {
	unsafe { cpp.EndScissorMode() }
}

// RLAPI void BeginVrStereoMode(VrStereoConfig config);              // Begin stereo rendering (requires VR simulator)
cpp unsafe fn BeginVrStereoMode(config: VrStereoConfig)
fn BeginVrStereoMode(config: VrStereoConfig) {
	unsafe { cpp.BeginVrStereoMode(config) }
}

// RLAPI void EndVrStereoMode(void);                                 // End stereo rendering (requires VR simulator)
cpp unsafe fn EndVrStereoMode()
fn EndVrStereoMode() {
	unsafe { cpp.EndVrStereoMode() }
}

// *************************************************************************************************
// Basic shapes drawing functions
// RLAPI void DrawPixel(int posX, int posY, Color color);                                                   // Draw a pixel using geometry [Can be slow, use with care]
cpp unsafe fn DrawPixel(posX: i32, posY: i32, color: Color)
fn DrawPixel(posX: i32, posY: i32, color: Color) {
	unsafe { cpp.DrawPixel(posX, posY, color) }
}

// RLAPI void DrawPixelV(Vector2 position, Color color);                                                    // Draw a pixel using geometry (Vector version) [Can be slow, use with care]
cpp unsafe fn DrawPixelV(position: Vector2, color: Color)
fn DrawPixelV(position: Vector2, color: Color) {
	unsafe { cpp.DrawPixelV(position, color) }
}

// RLAPI void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);                // Draw a line
cpp unsafe fn DrawLine(startX: i32, startY: i32, endPosX: i32, endPosY: i32, color: Color)
fn DrawLine(startX: i32, startY: i32, endX: i32, endY: i32, color: Color) {
	unsafe { cpp.DrawLine(startX, startY, endX, endY, color) }
}

// RLAPI void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);                                     // Draw a line (using gl lines)
cpp unsafe fn DrawLineV(start: Vector2, end: Vector2, color: Color)
fn DrawLineV(start: Vector2, end: Vector2, color: Color) {
	unsafe { cpp.DrawLineV(start, end, color) }
}

// RLAPI void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);                       // Draw a line (using triangles/quads)
cpp unsafe fn DrawLineEx(start: Vector2, end: Vector2, thick: f64, color: Color)
fn DrawLineEx(start: Vector2, end: Vector2, thick: f64, color: Color) {
	unsafe { cpp.DrawLineEx(start, end, thick, color) }
}

// RLAPI void DrawLineStrip(const Vector2 *points, int pointCount, Color color);                            // Draw lines sequence (using gl lines)
cpp unsafe fn DrawLineStrip(points: *Vector2, pointCount: i32, color: Color)
fn DrawLineStrip(points: []Vector2, pointCount: i32, color: Color) {
	unsafe { cpp.DrawLineStrip(&points[0], pointCount, color) }
}

// RLAPI void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);                   // Draw line segment cubic-bezier in-out interpolation
cpp unsafe fn DrawLineBezier(start: Vector2, end: Vector2, thick: f64, color: Color)
fn DrawLineBezier(start: Vector2, end: Vector2, thick: f64, color: Color) {
	unsafe { cpp.DrawLineBezier(start, end, thick, color) }
}

// RLAPI void DrawCircle(int centerX, int centerY, float radius, Color color);                              // Draw a color-filled circle
cpp unsafe fn DrawCircle(x: i32, y: i32, radius: f64, color: Color)
fn DrawCircle(x: i32, y: i32, radius: f64, color: Color) {
	unsafe { cpp.DrawCircle(x, y, radius, color) }
}

// RLAPI void DrawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color); // Draw circle sector outline
cpp unsafe fn DrawCircleSectorLines(center: Vector2, radius: f64, startAngle: f64, endAngle: f64, segments: i32, color: Color)
fn DrawCircleSectorLines(center: Vector2, radius: f64, startAngle: f64, endAngle: f64, segments: i32, color: Color) {
	unsafe { DrawCircleSectorLines(center, radius, startAngle, endAngle, segments, color) }
}

// RLAPI void DrawCircleGradient(int centerX, int centerY, float radius, Color inner, Color outer);         // Draw a gradient-filled circle
cpp unsafe fn DrawCircleGradient(x: i32, y: i32, radius: f64, inner: Color, color: Color)
fn DrawCircleGradient(x: i32, y: i32, radius: f64, inner: Color, color: Color) {
	unsafe { DrawCircleGradient(x, y, radius, inner, color) }
}

// RLAPI void DrawCircleV(Vector2 center, float radius, Color color);                                       // Draw a color-filled circle (Vector version)
cpp unsafe fn DrawCircleV(center: Vector2, radius: f64, color: Color)
fn DrawCircleV(center: Vector2, radius: f64, color: Color) {
	unsafe { DrawCircleV(center, radius, color) }
}

// RLAPI void DrawCircleLines(int centerX, int centerY, float radius, Color color);                         // Draw circle outline
cpp unsafe fn DrawCircleLines(x: i32, y: i32, radius: f64, color: Color)
fn DrawCircleLines(x: i32, y: i32, radius: f64, color: Color) {
	unsafe { cpp.DrawCircleLines(x, y, radius, color) }
}

// RLAPI void DrawCircleLinesV(Vector2 center, float radius, Color color);                                  // Draw circle outline (Vector version)
cpp unsafe fn DrawCircleLinesV(center: Vector2, radius: f64, color: Color)
fn DrawCircleLinesV(center: Vector2, radius: f64, color: Color) {
	unsafe { cpp.DrawCircleLinesV(center, radius, color) }
}

// RLAPI void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);             // Draw ellipse
cpp unsafe fn DrawEllipse(centerX: i32, centerY: i32, radiusH: f64, radiusV: f64, color: Color)
fn DrawEllipse(centerX: i32, centerY: i32, radiusH: f64, radiusV: f64, color: Color) {
	unsafe { cpp.DrawEllipse(centerX, centerY, radiusH, radiusV, color) }
}

// RLAPI void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color);        // Draw ellipse outline
cpp unsafe fn DrawEllipseLines(centerX: i32, centerY: i32, radiusH: f64, radiusV: f64, color: Color)
fn DrawEllipseLines(centerX: i32, centerY: i32, radiusH: f64, radiusV: f64, color: Color) {
	unsafe { cpp.DrawEllipseLines(centerX, centerY, radiusH, radiusV, color) }
}

// RLAPI void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color); // Draw ring
cpp unsafe fn DrawRing(center: Vector2, innerRadius: f64, outerRadius: f64, startAngle: f64, endAngle: f64, segments: i32, color: Color)
fn DrawRing(center: Vector2, innerRadius: f64, outerRadius: f64, startAngle: f64, endAngle: f64, segments: i32, color: Color) {
	unsafe { cpp.DrawRing(center, innerRadius, outerRadius, startAngle, endAngle, segments, color) }
}

// RLAPI void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);    // Draw ring outline
cpp unsafe fn DrawRingLines(center: Vector2, innerRadius: f64, outerRadius: f64, startAngle: f64, endAngle: f64, segments: i32, color: Color)
fn DrawRingLines(center: Vector2, innerRadius: f64, outerRadius: f64, startAngle: f64, endAngle: f64, segments: i32, color: Color) {
	unsafe { cpp.DrawRingLines(center, innerRadius, outerRadius, startAngle, endAngle, segments, color) }
}

// RLAPI void DrawRectangle(int posX, int posY, int width, int height, Color color);                        // Draw a color-filled rectangle
cpp unsafe fn DrawRectangle(posX: i32, posY: i32, width: i32, height: i32, color: Color)
fn DrawRectangle(posX: i32, posY: i32, width: i32, height: i32, color: Color) {
	unsafe { cpp.DrawRectangle(posX, posY, width, height, color) }
}

// RLAPI void DrawRectangleV(Vector2 position, Vector2 size, Color color);                                  // Draw a color-filled rectangle (Vector version)
cpp unsafe fn DrawRectangleV(position: Vector2, size: Vector2, color: Color)
fn DrawRectangleV(position: Vector2, size: Vector2, color: Color) {
	unsafe { cpp.DrawRectangleV(position, size, color) }
}

// RLAPI void DrawRectangleRec(Rectangle rec, Color color);                                                 // Draw a color-filled rectangle
cpp unsafe fn DrawRectangleRec(rec: Rectangle, color: Color)
fn DrawRectangleRec(rec: Rectangle, color: Color) {
	unsafe { cpp.DrawRectangleRec(rec, color) }
}

// RLAPI void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);                 // Draw a color-filled rectangle with pro parameters
cpp unsafe fn DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: f64, color: Color)
fn DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: f64, color: Color) {
	unsafe { cpp.DrawRectanglePro(rec, origin, rotation, color) }
}

// RLAPI void DrawRectangleGradientV(int posX, int posY, int width, int height, Color top, Color bottom);   // Draw a vertical-gradient-filled rectangle
cpp unsafe fn DrawRectangleGradientV(posX: i32, posY: i32, width: i32, height: i32, top: Color, bottom: Color)
fn DrawRectangleGradientV(posX: i32, posY: i32, width: i32, height: i32, top: Color, bottom: Color) {
	unsafe { cpp.DrawRectangleGradientV(posX, posY, width, height, top, bottom) }
}

// RLAPI void DrawRectangleGradientH(int posX, int posY, int width, int height, Color left, Color right);   // Draw a horizontal-gradient-filled rectangle
cpp unsafe fn DrawRectangleGradientH(posX: i32, posY: i32, width: i32, height: i32, left: Color, right: Color)
fn DrawRectangleGradientH(posX: i32, posY: i32, width: i32, height: i32, left: Color, right: Color) {
	unsafe { cpp.DrawRectangleGradientH(posX, posY, width, height, left, right) }
}

// RLAPI void DrawRectangleGradientEx(Rectangle rec, Color topLeft, Color bottomLeft, Color topRight, Color bottomRight); // Draw a gradient-filled rectangle with custom vertex colors
cpp unsafe fn DrawRectangleGradientEx(rec: Rectangle, topLeft: Color, bottomLeft: Color, topRight: Color, bottomRight: Color)
fn DrawRectangleGradientEx(rec: Rectangle, topLeft: Color, bottomLeft: Color, topRight: Color, bottomRight: Color) {
	unsafe { cpp.DrawRectangleGradientEx(rec, topLeft, bottomLeft, topRight, bottomRight) }
}

// RLAPI void DrawRectangleLines(int posX, int posY, int width, int height, Color color);                   // Draw rectangle outline
cpp unsafe fn DrawRectangleLines(posX: i32, posY: i32, width: i32, height: i32, color: Color)
fn DrawRectangleLines(posX: i32, posY: i32, width: i32, height: i32, color: Color) {
	unsafe { cpp.DrawRectangleLines(posX, posY, width, height, color) }
}

// RLAPI void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color);                            // Draw rectangle outline with extended parameters
cpp unsafe fn DrawRectangleLinesEx(rec: Rectangle, lineThick: f64, color: Color)
fn DrawRectangleLinesEx(rec: Rectangle, lineThick: f64, color: Color) {
	unsafe { cpp.DrawRectangleLinesEx(rec, lineThick, color) }
}

// RLAPI void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);              // Draw rectangle with rounded edges
cpp unsafe fn DrawRectangleRounded(rec: Rectangle, roundness: f64, segments: i32, color: Color)
fn DrawRectangleRounded(rec: Rectangle, roundness: f64, segments: i32, color: Color) {
	unsafe { cpp.DrawRectangleRounded(rec, roundness, segments, color) }
}

// RLAPI void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, Color color);         // Draw rectangle lines with rounded edges
cpp unsafe fn DrawRectangleRoundedLines(rec: Rectangle, roundness: f64, segments: i32, color: Color)
fn DrawRectangleRoundedLines(rec: Rectangle, roundness: f64, segments: i32, color: Color) {
	unsafe { cpp.DrawRectangleRoundedLines(rec, roundness, segments, color) }
}

// RLAPI void DrawRectangleRoundedLinesEx(Rectangle rec, float roundness, int segments, float lineThick, Color color); // Draw rectangle with rounded edges outline
cpp unsafe fn DrawRectangleRoundedLinesEx(rec: Rectangle, roundness: f64, segments: i32, lineThick: f64, color: Color)
fn DrawRectangleRoundedLinesEx(rec: Rectangle, roundness: f64, segments: i32, lineThick: f64, color: Color) {
	unsafe { cpp.DrawRectangleRoundedLinesEx(rec, roundness, segments, lineThick, color) }
}

// RLAPI void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                                // Draw a color-filled triangle (vertex in counter-clockwise order!)
cpp unsafe fn DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color)
fn DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) {
	unsafe { cpp.DrawTriangle(v1, v2, v3, color) }
}

// RLAPI void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                           // Draw triangle outline (vertex in counter-clockwise order!)
cpp unsafe fn DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color);
fn DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color){
    unsafe { cpp.DrawTriangleLines(v1, v2, v3, color)}
}

// RLAPI void DrawTriangleFan(const Vector2 *points, int pointCount, Color color);                          // Draw a triangle fan defined by points (first vertex is the center)
cpp unsafe fn DrawTriangleFan(points: *Vector2, pointCount: i32, color: Color);
fn DrawTriangleFan(points: []Vector2, pointCount: i32, color: Color){
    unsafe { cpp.DrawTriangleFan(&points[0], pointCount, color)}
}

// RLAPI void DrawTriangleStrip(const Vector2 *points, int pointCount, Color color);                        // Draw a triangle strip defined by points
cpp unsafe fn DrawTriangleStrip(points: *Vector2, pointCount: i32, color: Color);
fn DrawTriangleStrip(points: []Vector2, pointCount: i32, color: Color){
    unsafe { cpp.DrawTriangleStrip(&points[0], pointCount, color)}
}

// RLAPI void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);               // Draw a regular polygon (Vector version)
cpp unsafe fn DrawPoly(center: Vector2, sides: i32, radius: f64, rotation: f64, color: Color);
fn DrawPoly(center: Vector2, sides: i32, radius: f64, rotation: f64, color: Color){
    unsafe { cpp.DrawPoly(center, sides, radius, rotation, color)}
}

// RLAPI void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);          // Draw a polygon outline of n sides
cpp unsafe fn DrawPolyLines(center: Vector2, sides: i32, radius: f64, rotation: f64, color: Color);
fn DrawPolyLines(center: Vector2, sides: i32, radius: f64, rotation: f64, color: Color){
    unsafe { cpp.DrawPolyLines(center, sides, radius, rotation, color)}
}

// RLAPI void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color); // Draw a polygon outline of n sides with extended parameters
cpp unsafe fn DrawPolyLinesEx(center: Vector2, sides: i32, radius: f64, rotation: f64, lineThick: f64, color: Color);
fn DrawPolyLinesEx(center: Vector2, sides: i32, radius: f64, rotation: f64, lineThick: f64, color: Color){
    unsafe { cpp.DrawPolyLinesEx(center, sides, radius, rotation, lineThick, color)}
}
//**********************************************************************************************