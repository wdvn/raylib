cpp use "main.hpp"

unsafe fn strToCharPtr(s:str): *cpp.char{
    ret (*cpp.char)(&s[0])
}

unsafe fn ptrCharToStr(c: *cpp.char): str {
    if c == nil {
        ret ""
    }
    let mut s = ""
    let mut i = 0
    for int(c[i]) != 0; i++ {
        s += str(c[i])
    }
    ret s
}


//********************************************************
// Draw function 

cpp unsafe fn DrawText(text: *cpp.char,  posX:int,  posY:int,  fontSize:int,  color:cpp.Color)
fn DrawText(text: str,posX:int,  posY:int,  fontSize:int,  color:Color){
    unsafe{ cpp.DrawText(strToCharPtr(text),posX,posY,fontSize, color.v)}
}




// Image loading functions
// NOTE: These functions do not require GPU access
//RLAPI Image LoadImage(const char *fileName);                                                             // Load image from file into CPU memory (RAM)
cpp unsafe fn LoadImage(path: *cpp.char): Image
fn LoadImage(path:str):Image{
    ret unsafe { cpp.LoadImage(strToCharPtr(path))}
}
//RLAPI Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize);       // Load image from RAW file data
//RLAPI Image LoadImageAnim(const char *fileName, int *frames);                                            // Load image sequence from file (frames appended to image.data)
//RLAPI Image LoadImageAnimFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int *frames); // Load image sequence from memory buffer
//RLAPI Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);      // Load image from memory buffer, fileType refers to extension: i.e. '.png'
//RLAPI Image LoadImageFromTexture(Texture2D texture);                                                     // Load image from GPU texture data
//RLAPI Image LoadImageFromScreen(void);                                                                   // Load image from screen buffer and (screenshot)
//RLAPI bool IsImageValid(Image image);                                                                    // Check if an image is valid (data and parameters)
//RLAPI void UnloadImage(Image image);                                                                     // Unload image from CPU memory (RAM)
//RLAPI bool ExportImage(Image image, const char *fileName);                                               // Export image data to file, returns true on success
//RLAPI unsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize);              // Export image to memory buffer
//RLAPI bool ExportImageAsCode(Image image, const char *fileName);                                         // Export image as code file defining an array of bytes, returns true on success
