cpp use "main.hpp"

cpp type char: byte

#typedef
cpp struct Color {
    r: u8
    b: u8
    g: u8
    a: u8
}

struct Color {
   v: cpp.Color
}
impl Color{
    static fn new(r:u8,b:u8,g:u8,a:u8): Color{
        ret Color{v: cpp.Color{
            r: r,
            b:b,
            g:g,a:a
        }}
    }
    static fn Black(): Color{
        ret Color.new( 0, 0, 0, 255 ) 
    }
    static fn RayWhite(): Color{
        ret Color.new(245, 245, 245, 255 )
    }
}
unsafe fn strToCharPtr(s:str): *cpp.char{
    ret (*cpp.char)(&s[0])
}

unsafe fn pchar_to_str(c: *cpp.char): str {
    if c == nil {
        ret ""
    }
    let mut s = ""
    let mut i = 0
    for int(c[i]) != 0; i++ {
        s += str(c[i])
    }
    ret s
}

// Window function
cpp unsafe fn InitWindow(w:int,h:int,title: *cpp.char)

fn InitWindow(w: int,h:int,title:str) {
    unsafe { cpp.InitWindow(w,h,(*cpp.char)(&title[0])) }
}

cpp unsafe fn BeginDrawing()
fn BeginDrawing(){
    unsafe {cpp.BeginDrawing()}
}

cpp unsafe fn EndDrawing()
fn EndDrawing(){
    unsafe {cpp.EndDrawing()}
}

cpp unsafe fn CloseWindow()
fn CloseWindow(){
    unsafe {cpp.CloseWindow()}
}

cpp unsafe fn WindowShouldClose(): bool
fn WindowShouldClose(): bool{
    ret unsafe {cpp.WindowShouldClose()}
}


// Draw function

cpp unsafe fn DrawText(text: *cpp.char,  posX:int,  posY:int,  fontSize:int,  color:cpp.Color)
fn DrawText(text: str,posX:int,  posY:int,  fontSize:int,  color:Color){
    unsafe{ cpp.DrawText(strToCharPtr(text),posX,posY,fontSize, color.v)}
}

cpp unsafe fn ClearBackground(color: cpp.Color)
fn ClearBackground(color: Color){
    unsafe {cpp.ClearBackground(color.v)}
}