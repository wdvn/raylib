cpp use "main.hpp"

unsafe fn strToCharPtr(s:str): *cpp.char{
    ret (*cpp.char)(&s[0])
}

unsafe fn ptrCharToStr(c: *cpp.char): str {
    if c == nil {
        ret ""
    }
    let mut s = ""
    let mut i = 0
    for int(c[i]) != 0; i++ {
        s += str(c[i])
    }
    ret s
}


//********************************************************
// Draw function 

cpp unsafe fn DrawText(text: *cpp.char,  posX:int,  posY:int,  fontSize:int,  color:cpp.Color)
fn DrawText(text: str,posX:int,  posY:int,  fontSize:int,  color:Color){
    unsafe{ cpp.DrawText(strToCharPtr(text),posX,posY,fontSize, color.v)}
}



// Drawing-related functions
cpp unsafe fn ClearBackground(color: cpp.Color)
fn ClearBackground(color: Color){
    unsafe {cpp.ClearBackground(color.v)}
}

cpp unsafe fn BeginDrawing()
fn BeginDrawing(){
    unsafe {cpp.BeginDrawing()}
}

cpp unsafe fn EndDrawing()
fn EndDrawing(){
    unsafe {cpp.EndDrawing()}
}

// RLAPI void BeginMode2D(Camera2D camera);                          // Begin 2D mode with custom camera (2D)
// RLAPI void EndMode2D(void);                                       // Ends 2D mode with custom camera
cpp unsafe fn EndMode2D()
fn EndMode2D(){
    unsafe {cpp.EndMode2D()}
}
// RLAPI void BeginMode3D(Camera3D camera);                          // Begin 3D mode with custom camera (3D)
// RLAPI void EndMode3D(void);                                       // Ends 3D mode and returns to default 2D orthographic mode
cpp unsafe fn EndMode3D()
fn EndMode3D(){
    unsafe {cpp.EndMode3D()}
}
// RLAPI void BeginTextureMode(RenderTexture2D target);              // Begin drawing to render texture
// RLAPI void EndTextureMode(void);                                  // Ends drawing to render texture
//cpp unsafe fn EndTextureMode()
//fn EndTextureMode(){
//    unsafe {cpp.EndTextureMode()}
//}

// RLAPI void BeginShaderMode(Shader shader);                        // Begin custom shader drawing
//cpp unsafe fn BeginShaderMode()
//fn BeginShaderMode(){
//    unsafe {cpp.BeginShaderMode()}
//}

// RLAPI void EndShaderMode(void);                                   // End custom shader drawing (use default shader)
cpp unsafe fn EndShaderMode()
fn EndShaderMode(){
    unsafe {cpp.EndShaderMode()}
}

// RLAPI void BeginBlendMode(int mode);                              // Begin blending mode (alpha, additive, multiplied, subtract, custom)
cpp unsafe fn BeginBlendMode(mode:int)
fn BeginBlendMode(mode:int){
    unsafe {cpp.BeginBlendMode(mode)}
}

// RLAPI void EndBlendMode(void);                                    // End blending mode (reset to default: alpha blending)
cpp unsafe fn EndBlendMode()
fn EndBlendMode(){
    unsafe {cpp.EndBlendMode()}
}
// RLAPI void BeginScissorMode(int x, int y, int width, int height); // Begin scissor mode (define screen area for following drawing)
cpp unsafe fn BeginScissorMode(x:int,y:int,w:int,h:int)
fn BeginScissorMode(x:int,y:int,w:int,h:int){
    unsafe {cpp.BeginScissorMode(x,y,w,h)}
}
// RLAPI void EndScissorMode(void);                                  // End scissor mode
cpp unsafe fn EndScissorMode()
fn EndScissorMode(){
    unsafe {cpp.EndScissorMode()}
}
// RLAPI void BeginVrStereoMode(VrStereoConfig config);              // Begin stereo rendering (requires VR simulator)

// RLAPI void EndVrStereoMode(void);                                 // End stereo rendering (requires VR simulator)
cpp unsafe fn EndVrStereoMode()
fn EndVrStereoMode(){
    unsafe {cpp.EndVrStereoMode()}
}


// Image loading functions
// NOTE: These functions do not require GPU access
//RLAPI Image LoadImage(const char *fileName);                                                             // Load image from file into CPU memory (RAM)
cpp unsafe fn LoadImage(path: *cpp.char): Image
fn LoadImage(path:str):Image{
    ret unsafe { cpp.LoadImage(strToCharPtr(path))}
}
//RLAPI Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize);       // Load image from RAW file data
//RLAPI Image LoadImageAnim(const char *fileName, int *frames);                                            // Load image sequence from file (frames appended to image.data)
//RLAPI Image LoadImageAnimFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int *frames); // Load image sequence from memory buffer
//RLAPI Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);      // Load image from memory buffer, fileType refers to extension: i.e. '.png'
//RLAPI Image LoadImageFromTexture(Texture2D texture);                                                     // Load image from GPU texture data
//RLAPI Image LoadImageFromScreen(void);                                                                   // Load image from screen buffer and (screenshot)
//RLAPI bool IsImageValid(Image image);                                                                    // Check if an image is valid (data and parameters)
//RLAPI void UnloadImage(Image image);                                                                     // Unload image from CPU memory (RAM)
//RLAPI bool ExportImage(Image image, const char *fileName);                                               // Export image data to file, returns true on success
//RLAPI unsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize);              // Export image to memory buffer
//RLAPI bool ExportImageAsCode(Image image, const char *fileName);                                         // Export image as code file defining an array of bytes, returns true on success
