// Window-related functions

cpp unsafe fn InitWindow(w: int, h: int, title: *cpp.char)
fn InitWindow(w: int, h: int, title: str) {
	unsafe { cpp.InitWindow(w, h, (*cpp.char)(&title[0])) }
}

cpp unsafe fn CloseWindow()
fn CloseWindow() {
	unsafe { cpp.CloseWindow() }
}

cpp unsafe fn WindowShouldClose(): bool
fn WindowShouldClose(): bool {
	ret unsafe { cpp.WindowShouldClose() }
}

cpp unsafe fn IsWindowReady(): bool
fn IsWindowReady(): bool {
	ret unsafe { cpp.IsWindowReady() }
}

// RLAPI bool IsWindowFullscreen(void);                              // Check if window is currently fullscreen
cpp unsafe fn IsWindowFullscreen(): bool
fn IsWindowFullscreen(): bool {
	ret unsafe { cpp.IsWindowFullscreen() }
}

// RLAPI bool IsWindowHidden(void);                                  // Check if window is currently hidden
cpp unsafe fn IsWindowHidden(): bool
fn IsWindowHidden(): bool {
	ret unsafe { cpp.IsWindowHidden() }
}

// RLAPI bool IsWindowMinimized(void): bool;                               // Check if window is currently minimized
cpp unsafe fn IsWindowMinimized(): bool
fn IsWindowMinimized(): bool {
	ret unsafe { cpp.IsWindowMinimized() }
}

// RLAPI bool IsWindowMaximized(void);                               // Check if window is currently maximized
cpp unsafe fn IsWindowMaximized(): bool
fn IsWindowMaximized(): bool {
	ret unsafe { cpp.IsWindowMaximized() }
}

// RLAPI bool IsWindowFocused(void);                                 // Check if window is currently focused
cpp unsafe fn IsWindowFocused(): bool
fn IsWindowFocused(): bool {
	ret unsafe { cpp.IsWindowFocused() }
}

// RLAPI bool IsWindowResized(void);                                 // Check if window has been resized last frame
cpp unsafe fn IsWindowResized(): bool
fn IsWindowResized(): bool {
	ret unsafe { cpp.IsWindowResized() }
}

// RLAPI bool IsWindowState(unsigned int flag);                      // Check if one specific window flag is enabled
cpp unsafe fn IsWindowState(flag: uint): bool
fn IsWindowState(flag: uint): bool {
	ret unsafe { cpp.IsWindowState(flag) }
}

// RLAPI void SetWindowState(unsigned int flags);                    // Set window configuration state using flags
cpp unsafe fn SetWindowState(flags: uint)
fn SetWindowState(flags: uint) {
	unsafe { cpp.SetWindowState(flags) }
}

// RLAPI void ClearWindowState(unsigned int flags);                  // Clear window configuration state flags
cpp unsafe fn ClearWindowState(flags: uint)
fn ClearWindowState(flags: uint) {
	unsafe { cpp.ClearWindowState(flags) }
}

// RLAPI void ToggleFullscreen(void);                                // Toggle window state: fullscreen/windowed, resizes monitor to match window resolution
cpp unsafe fn ToggleFullscreen()
fn ToggleFullscreen() {
	unsafe { cpp.ToggleFullscreen() }
}

// RLAPI void ToggleBorderlessWindowed(void);                        // Toggle window state: borderless windowed, resizes window to match monitor resolution
cpp unsafe fn ToggleBorderlessWindowed()
fn ToggleBorderlessWindowed() {
	unsafe { cpp.ToggleBorderlessWindowed() }
}

// RLAPI void MaximizeWindow(void);                                  // Set window state: maximized, if resizable
cpp unsafe fn MaximizeWindow()
fn MaximizeWindow() {
	unsafe { cpp.MaximizeWindow() }
}

// RLAPI void MinimizeWindow(void);                                  // Set window state: minimized, if resizable
cpp unsafe fn MinimizeWindow()
fn MinimizeWindow() {
	unsafe { cpp.MinimizeWindow() }
}

// RLAPI void RestoreWindow(void);                                   // Set window state: not minimized/maximized
cpp unsafe fn RestoreWindow()
fn RestoreWindow() {
	unsafe { cpp.RestoreWindow() }
}

// RLAPI void SetWindowIcon(Image image);                            // Set icon for window (single image, RGBA 32bit)
cpp unsafe fn SetWindowIcon(image: cpp.Image)
fn SetWindowIcon(image: Image) {
	unsafe { cpp.SetWindowIcon(image) }
}

// RLAPI void SetWindowIcons(Image *images, int count);              // Set icon for window (multiple images, RGBA 32bit)
cpp unsafe fn SetWindowIcons(images: *cpp.Image, count: int)
fn SetWindowIcons(images: []Image, count: int) {
	unsafe { cpp.SetWindowIcons(&images[0], count) }
}

// RLAPI void SetWindowTitle(const char *title);                     // Set title for window
cpp unsafe fn SetWindowTitle(images: *cpp.char)
fn SetWindowTitle(title: str) {
	unsafe { cpp.SetWindowTitle(strToCharPtr(title)) }
}

//RLAPI void SetWindowPosition(int x, int y);                       // Set window position on screen
cpp unsafe fn SetWindowPosition(x: int, y: int)
fn SetWindowPosition(x: int, y: int) {
	unsafe { cpp.SetWindowPosition(x, y) }
}

// RLAPI void SetWindowMonitor(int monitor);                         // Set monitor for the current window
cpp unsafe fn SetWindowMonitor(monitor: int)
fn SetWindowMonitor(monitor: int) {
	unsafe { cpp.SetWindowMonitor(monitor) }
}

// RLAPI void SetWindowMinSize(int width, int height);               // Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
cpp unsafe fn SetWindowMinSize(w: int, h: int)
fn SetWindowMinSize(w: int, h: int) {
	unsafe { cpp.SetWindowMinSize(w, h) }
}

// RLAPI void SetWindowMaxSize(int width, int height);               // Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
cpp unsafe fn SetWindowMaxSize(w: int, h: int)
fn SetWindowMaxSize(w: int, h: int) {
	unsafe { cpp.SetWindowMaxSize(w, h) }
}

// RLAPI void SetWindowSize(int width, int height);                  // Set window dimensions
cpp unsafe fn SetWindowSize(w: int, h: int)
fn SetWindowSize(w: int, h: int) {
	unsafe { cpp.SetWindowSize(w, h) }
}

// RLAPI void SetWindowOpacity(float opacity);                       // Set window opacity [0.0f..1.0f]
cpp unsafe fn SetWindowOpacity(opacity: f64)
fn SetWindowOpacity(opacity: f64) {
	unsafe { cpp.SetWindowOpacity(opacity) }
}

// RLAPI void SetWindowFocused(void);                                // Set window focused
cpp unsafe fn SetWindowFocused()
fn SetWindowFocused() {
	unsafe { cpp.SetWindowFocused() }
}

// RLAPI void *GetWindowHandle(void);                                // Get native window handle
// TODO: check this function
//cpp unsafe fn GetWindowHandle(): *any
//fn GetWindowHandle():*any{
//     ret unsafe {(*any)(cpp.GetWindowHandle())}
//}

// RLAPI int GetScreenWidth(void);                                   // Get current screen width
cpp unsafe fn GetScreenWidth(): int
fn GetScreenWidth(): int {
	ret unsafe { cpp.GetScreenWidth() }
}

// RLAPI int GetScreenHeight(void);                                  // Get current screen height
cpp unsafe fn GetScreenHeight(): int
fn GetScreenHeight(): int {
	ret unsafe { cpp.GetScreenHeight() }
}

// RLAPI int GetRenderWidth(void);                                   // Get current render width (it considers HiDPI)
cpp unsafe fn GetRenderWidth(): int
fn GetRenderWidth(): int {
	ret unsafe { cpp.GetRenderWidth() }
}

// RLAPI int GetRenderHeight(void);                                  // Get current render height (it considers HiDPI)
cpp unsafe fn GetRenderHeight(): int
fn GetRenderHeight(): int {
	ret unsafe { cpp.GetRenderHeight() }
}

// RLAPI int GetMonitorCount(void);                                  // Get number of connected monitors
cpp unsafe fn GetMonitorCount(): int
fn GetMonitorCount(): int {
	ret unsafe { cpp.GetMonitorCount() }
}

// RLAPI int GetCurrentMonitor(void);                                // Get current monitor where window is placed
cpp unsafe fn GetCurrentMonitor(): int
fn GetCurrentMonitor(): int {
	ret unsafe { cpp.GetCurrentMonitor() }
}

// RLAPI Vector2 GetMonitorPosition(int monitor);                    // Get specified monitor position
cpp unsafe fn GetMonitorPosition(monitor: int): Vector2
fn GetMonitorPosition(monitor: int): Vector2 {
	ret unsafe { cpp.GetMonitorPosition(monitor) }
}

// RLAPI int GetMonitorWidth(int monitor);                           // Get specified monitor width (current video mode used by monitor)
cpp unsafe fn GetMonitorWidth(monitor: int): int
fn GetMonitorWidth(monitor: int): int {
	ret unsafe { cpp.GetMonitorWidth(monitor) }
}

// RLAPI int GetMonitorHeight(int monitor);                          // Get specified monitor height (current video mode used by monitor)
cpp unsafe fn GetMonitorHeight(monitor: int): int
fn GetMonitorHeight(monitor: int): int {
	ret unsafe { cpp.GetMonitorHeight(monitor) }
}

// RLAPI int GetMonitorPhysicalWidth(int monitor);                   // Get specified monitor physical width in millimetres
cpp unsafe fn GetMonitorPhysicalWidth(monitor: int): int
fn GetMonitorPhysicalWidth(monitor: int): int {
	ret unsafe { cpp.GetMonitorPhysicalWidth(monitor) }
}

// RLAPI int GetMonitorPhysicalHeight(int monitor);                  // Get specified monitor physical height in millimetres
cpp unsafe fn GetMonitorPhysicalHeight(monitor: int): int
fn GetMonitorPhysicalHeight(monitor: int): int {
	ret unsafe { cpp.GetMonitorPhysicalHeight(monitor) }
}

// RLAPI int GetMonitorRefreshRate(int monitor);                     // Get specified monitor refresh rate
cpp unsafe fn GetMonitorRefreshRate(monitor: int): int
fn GetMonitorRefreshRate(monitor: int): int {
	ret unsafe { cpp.GetMonitorRefreshRate(monitor) }
}

// RLAPI Vector2 GetWindowPosition(void);                            // Get window position XY on monitor
cpp unsafe fn GetWindowPosition(): Vector2
fn GetWindowPosition(): Vector2 {
	ret unsafe { cpp.GetWindowPosition() }
}

// RLAPI Vector2 GetWindowScaleDPI(void);                            // Get window scale DPI factor
cpp unsafe fn GetWindowScaleDPI(): Vector2
fn GetWindowScaleDPI(): Vector2 {
	ret unsafe { cpp.GetWindowScaleDPI() }
}

// RLAPI const char *GetMonitorName(int monitor);                    // Get the human-readable, UTF-8 encoded name of the specified monitor
cpp unsafe fn GetMonitorName(monitor: int): str
fn GetMonitorName(monitor: int): str {
	//let raw = unsafe {cpp.GetMonitorName(monitor)}
	//ret unsafe {ptrCharToStr(raw)}
	ret unsafe { cpp.GetMonitorName(monitor) }
}

// RLAPI void SetClipboardText(const char *text);                    // Set clipboard text content
cpp unsafe fn SetClipboardText(text: *cpp.char)
fn SetClipboardText(text: str) {
	unsafe { cpp.SetClipboardText(strToCharPtr(text)) }
}

// RLAPI const char *GetClipboardText(void);                         // Get clipboard text content
cpp unsafe fn GetClipboardText(): str
fn GetClipboardText(): str {
	ret unsafe { cpp.GetClipboardText() }
}

// RLAPI Image GetClipboardImage(void);                              // Get clipboard image content
cpp unsafe fn GetClipboardImage(): Image
fn GetClipboardImage(): Image {
	ret unsafe { cpp.GetClipboardImage() }
}

// RLAPI void EnableEventWaiting(void);                              // Enable waiting for events on EndDrawing(), no automatic event polling
cpp unsafe fn EnableEventWaiting()
fn EnableEventWaiting() {
	unsafe { cpp.EnableEventWaiting() }
}

// RLAPI void DisableEventWaiting(void);                             // Disable waiting for events on EndDrawing(), automatic events polling
cpp unsafe fn DisableEventWaiting()
fn DisableEventWaiting() {
	unsafe { cpp.DisableEventWaiting() }
}

//*********************************************************
// VR stereo config functions for VR simulator
// RLAPI VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);     // Load VR stereo config for VR simulator device parameters
cpp unsafe fn LoadVrStereoConfig(device: VrDeviceInfo): VrStereoConfig
fn LoadVrStereoConfig(device: VrDeviceInfo): VrStereoConfig {
	ret unsafe { cpp.LoadVrStereoConfig(device) }
}

// RLAPI void UnloadVrStereoConfig(VrStereoConfig config);           // Unload VR stereo config
cpp unsafe fn UnloadVrStereoConfig(config: VrStereoConfig)
fn UnloadVrStereoConfig(config: VrStereoConfig) {
	unsafe { cpp.UnloadVrStereoConfig(config) }
}

//**********************************************************************
// RLAPI Ray GetScreenToWorldRay(Vector2 position, Camera camera);         // Get a ray trace from screen position (i.e mouse)
cpp unsafe fn GetScreenToWorldRay(position: Vector2, camera: Camera): Ray
fn GetScreenToWorldRay(position: Vector2, camera: Camera): Ray {
	ret unsafe { cpp.GetScreenToWorldRay(position, camera) }
}

// RLAPI Ray GetScreenToWorldRayEx(Vector2 position, Camera camera, int width, int height); // Get a ray trace from screen position (i.e mouse) in a viewport
cpp unsafe fn GetScreenToWorldRayEx(position: Vector2, camera: Camera, width: i32, height: i32): Ray
fn GetScreenToWorldRayEx(position: Vector2, camera: Camera, width: i32, height: i32): Ray {
	ret unsafe { cpp.GetScreenToWorldRayEx(position, camera, width, height) }
}

// RLAPI Vector2 GetWorldToScreen(Vector3 position, Camera camera);        // Get the screen space position for a 3d world space position
cpp unsafe fn GetWorldToScreen(position: Vector3, camera: Camera): Vector2
fn GetWorldToScreen(position: Vector3, camera: Camera): Vector2 {
	ret unsafe { cpp.GetWorldToScreen(position, camera) }
}

// RLAPI Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height); // Get size position for a 3d world space position
cpp unsafe fn GetWorldToScreenEx(position: Vector3, camera: Camera, width: i32, height: i32): Vector2
fn GetWorldToScreenEx(position: Vector3, camera: Camera, width: i32, height: i32): Vector2 {
	ret unsafe { cpp.GetWorldToScreenEx(position, camera, width, height) }
}

// RLAPI Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera);    // Get the screen space position for a 2d camera world space position
cpp unsafe fn GetWorldToScreen2D(position: Vector2, camera: Camera2D): Vector2
fn GetWorldToScreen2D(position: Vector2, camera: Camera2D): Vector2 {
	ret unsafe { cpp.GetWorldToScreen2D(position, camera) }
}

// RLAPI Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera);    // Get the world space position for a 2d camera screen space position
cpp unsafe fn GetScreenToWorld2D(position: Vector2, camera: Camera2D): Vector2
fn GetScreenToWorld2D(position: Vector2, camera: Camera2D): Vector2 {
	ret unsafe { cpp.GetScreenToWorld2D(position, camera) }
}

// RLAPI Matrix GetCameraMatrix(Camera camera);                            // Get camera transform matrix (view matrix)
cpp unsafe fn GetCameraMatrix(camera: Camera): Matrix
fn GetCameraMatrix(camera: Camera): Matrix {
	ret unsafe { cpp.GetCameraMatrix(camera) }
}

// RLAPI Matrix GetCameraMatrix2D(Camera2D camera);                        // Get camera 2d transform matrix
cpp unsafe fn GetCameraMatrix2D(camera: Camera2D): Matrix
fn GetCameraMatrix2D(camera: Camera2D): Matrix {
	ret unsafe { cpp.GetCameraMatrix2D(camera) }
}